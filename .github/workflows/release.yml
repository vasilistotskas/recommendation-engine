name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # Get previous tag
        PREV_TAG=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")

        if [ -z "$PREV_TAG" ]; then
          # First release
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # Generate changelog since previous tag
          CHANGELOG=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## Changes

          ${{ steps.changelog.outputs.changelog }}

          ## Docker Images

          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker pull ghcr.io/${{ github.repository }}:latest
          ```

          ## Installation

          See [README.md](README.md) for installation instructions.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  build-binaries:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    needs: create-release

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: recommendation-api
            asset_name: recommendation-api-linux-amd64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            artifact_name: recommendation-api
            asset_name: recommendation-api-linux-amd64-musl
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: recommendation-api
            asset_name: recommendation-api-macos-amd64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: recommendation-api
            asset_name: recommendation-api-macos-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: recommendation-api.exe
            asset_name: recommendation-api-windows-amd64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install musl-tools (Linux musl only)
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: sudo apt-get install -y musl-tools

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }} --bin recommendation-api

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create tarball (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar czf ../../../${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}

    - name: Create zip (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ../../../${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ matrix.asset_name }}*

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ghcr.io/${{ github.repository }}:latest
        platforms: linux/amd64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-binaries, publish-docker]
    if: always()

    steps:
    - name: Send notification
      run: |
        echo "Release ${{ github.ref_name }} completed"
        echo "Status: ${{ job.status }}"
        # Add Slack/Discord/Email notification here if needed
