# Default values for recommendation-engine Helm chart

# Number of replicas
replicaCount: 3

# Image configuration
image:
  repository: grooveshop/recommendation-engine
  pullPolicy: Always
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 8080

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: recommendations.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: recommendation-engine-tls
      hosts:
        - recommendations.example.com

# Resource limits and requests
resources:
  requests:
    memory: "512Mi"
    cpu: "250m"
  limits:
    memory: "2Gi"
    cpu: "1000m"

# Horizontal Pod Autoscaler
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 4
        periodSeconds: 30

# Liveness and Readiness Probes
livenessProbe:
  httpGet:
    path: /health
    port: 8080
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Lifecycle hooks
lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "sleep 15"]

# Pod termination grace period
terminationGracePeriodSeconds: 30

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Pod annotations
podAnnotations: {}

# Pod security context
podSecurityContext: {}

# Container security context
securityContext: {}

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity: {}

# Application configuration
config:
  # Logging
  logLevel: "info"
  rustBacktrace: "0"

  # Algorithm weights (must sum to 1.0)
  collaborativeWeight: "0.6"
  contentWeight: "0.4"

  # Cache TTL (in seconds)
  cacheTtlRecommendations: "300"  # 5 minutes
  cacheTtlTrending: "3600"        # 1 hour
  cacheTtlUserProfile: "600"      # 10 minutes

  # Rate limiting
  rateLimitRequests: "1000"
  rateLimitWindowSecs: "60"

  # Model update intervals (in seconds)
  updateIntervalUserSimilarity: "10"
  updateIntervalEntitySimilarity: "5"
  updateIntervalTrending: "3600"
  fullRebuildInterval: "86400"    # 24 hours

  # Recommendation parameters
  defaultRecommendationCount: "10"
  similarityThreshold: "0.3"
  coldStartMinInteractions: "5"

  # Performance tuning
  dbPoolMaxConnections: "20"
  dbPoolMinConnections: "5"
  redisPoolMaxConnections: "10"

  # Feature extraction
  maxAttributeDepth: "3"
  vectorDimension: "128"

# Secrets configuration (values should be provided via values-prod.yaml or --set flags)
secrets:
  # PostgreSQL connection string
  # Example: postgresql://postgres:password@postgres-service:5432/recommendations?sslmode=require
  databaseUrl: ""

  # Redis connection string
  # Example: redis://redis-service:6379
  redisUrl: ""

  # API Key for authentication
  apiKey: ""
